S T_EOF
T_IDENTIFIER T_INTEGER_LITERAL T_FLOAT_LITERAL T_STRING_LITERAL T_CHAR_LITERAL T_IF T_ELSE T_WHILE T_FOR T_RETURN T_INT T_FLOAT T_CHAR T_VOID T_STRUCT T_PLUS T_MINUS T_MULTIPLY T_DIVIDE T_ASSIGN T_EQUAL T_NOTEQUAL T_LESS T_LESSEQUAL T_GREATER T_GREATEREQUAL T_AND T_OR T_NOT T_MOD T_INCREMENT T_DECREMENT T_BITAND T_BITOR T_BITXOR T_BITNOT T_LEFTSHIFT T_RIGHTSHIFT T_SEMICOLON T_LEFT_BRACE T_RIGHT_BRACE T_LEFT_PAREN T_RIGHT_PAREN T_LEFT_SQUARE T_RIGHT_SQUARE T_COMMA T_DOT T_ARROW T_COLON T_QUESTION T_EOF
S ::= program
program ::= declaration_list
declaration_list ::= declaration declaration_list | declaration
declaration ::= var_declaration | fun_declaration
var_declaration ::= type_specifier T_IDENTIFIER opt_init T_SEMICOLON | type_specifier T_IDENTIFIER T_SEMICOLON | type_specifier T_IDENTIFIER T_LEFT_SQUARE T_INTEGER_LITERAL T_RIGHT_SQUARE T_SEMICOLON
opt_init ::= T_ASSIGN expression
type_specifier ::= T_CONST simple_type | simple_type
fun_declaration ::= type_specifier T_IDENTIFIER T_LEFT_PAREN params T_RIGHT_PAREN compound_stmt | type_specifier T_IDENTIFIER T_LEFT_PAREN T_RIGHT_PAREN compound_stmt
params ::= param_list | T_VOID 
param_list ::= param | param_list T_COMMA param
param ::= type_specifier T_IDENTIFIER | type_specifier T_IDENTIFIER T_LEFT_SQUARE T_RIGHT_SQUARE
compound_stmt ::= T_LEFT_BRACE block_items T_RIGHT_BRACE | T_LEFT_BRACE T_RIGHT_BRACE
block_items ::= statement_list
statement_list ::= statement statement_list | statement
statement ::= var_declaration | expression_stmt | compound_stmt | selection_stmt | iteration_stmt | return_stmt
expression_stmt ::= expression T_SEMICOLON
expression ::= simple_expression | var T_ASSIGN expression | postfix_expression 
var ::= T_IDENTIFIER | T_IDENTIFIER T_LEFT_SQUARE expression T_RIGHT_SQUARE
simple_expression ::= additive_expression relop additive_expression | additive_expression 
additive_expression ::= term | additive_expression addop term
term ::= factor | term mulop factor | postfix_expression
factor ::= T_LEFT_PAREN expression T_RIGHT_PAREN | var | call | T_INTEGER_LITERAL | T_STRING_LITERAL | T_CHAR_LITERAL | T_FLOAT_LITERAL | inc_dec_operator var | T_NOT factor | T_BITNOT factor
call ::= T_IDENTIFIER T_LEFT_PAREN args T_RIGHT_PAREN | T_IDENTIFIER T_LEFT_PAREN T_RIGHT_PAREN | T_IDENTIFIER T_LEFT_PAREN T_RIGHT_PAREN
args ::= arg_list
arg_list ::= expression | arg_list T_COMMA expression
simple_type ::= T_VOID | T_FLOAT | T_DOUBLE | T_INT | T_LONG | T_CHAR
addop ::= T_PLUS | T_MINUS
mulop ::= T_MULTIPLY | T_DIVIDE | T_MOD | T_BITAND | T_BITOR | T_BITXOR | T_LEFTSHIFT | T_RIGHTSHIFT
relop ::= T_LESS | T_GREATER | T_EQUAL | T_GREATEREQUAL | T_LESSEQUAL
postfix_expression ::= var inc_dec_operator
inc_dec_operator ::= T_INCREMENT | T_DECREMENT
selection_stmt ::= T_IF T_LEFT_PAREN expression T_RIGHT_PAREN statement | T_IF T_LEFT_PAREN expression T_RIGHT_PAREN statement T_ELSE statement
return_stmt ::= T_RETURN T_SEMICOLON | T_RETURN expression T_SEMICOLON
iteration_stmt ::= T_WHILE T_LEFT_PAREN expression T_RIGHT_PAREN statement | T_FOR T_LEFT_PAREN opt_expression_stmt opt_expression_stmt expression T_RIGHT_PAREN statement
opt_expression_stmt ::= expression_stmt | T_SEMICOLON